(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{415:function(e,t,a){"use strict";a.r(t);var r=a(28),s=Object(r.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"introducing-api-version-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#introducing-api-version-4"}},[e._v("#")]),e._v(" Introducing API version 4")]),a("h2",{attrs:{id:"preface"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#preface"}},[e._v("#")]),e._v(" Preface")]),a("p",[e._v("As the amount of traffic increases, we come up with solutions to handle the traffic. Nowadays we handle\n2 million requests per hour (4 million on peak), which is great, but it requires proper server capacity and\neffective software that scales with the amount of traffic that make this service reliable.")]),a("h2",{attrs:{id:"openresty-luajit-and-lua-vips"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#openresty-luajit-and-lua-vips"}},[e._v("#")]),e._v(" OpenResty, LuaJIT and lua-vips")]),a("p",[e._v("With API version 4 we decided to rewrite to complete code base to Lua and switch to "),a("a",{attrs:{href:"https://openresty.org/en/",target:"_blank",rel:"noopener noreferrer"}},[e._v("OpenResty"),a("OutboundLink")],1),e._v(",\nwhich turns "),a("a",{attrs:{href:"https://nginx.org/",target:"_blank",rel:"noopener noreferrer"}},[e._v("nginx"),a("OutboundLink")],1),e._v(" and "),a("a",{attrs:{href:"https://luajit.org/luajit.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("LuaJIT"),a("OutboundLink")],1),e._v(" into a full-fledged scriptable web platform. For image handling and\nmanipulation we still use the "),a("a",{attrs:{href:"https://github.com/libvips/libvips",target:"_blank",rel:"noopener noreferrer"}},[e._v("libvips"),a("OutboundLink")],1),e._v(" image processing library under the hood. We have only moved\nfrom the "),a("a",{attrs:{href:"https://github.com/libvips/php-vips",target:"_blank",rel:"noopener noreferrer"}},[e._v("PHP-binding"),a("OutboundLink")],1),e._v(" to the "),a("a",{attrs:{href:"https://github.com/libvips/lua-vips",target:"_blank",rel:"noopener noreferrer"}},[e._v("Lua binding"),a("OutboundLink")],1),e._v(".")]),a("p",[e._v("You may wonder why we did this; it's because OpenResty is robust, fast and scales with the amount of\ntraffic we are processing nowadays. One of the core benefits of OpenResty is that it is fully asynchronous\nand that our code can be written directly inside Nginx without using PHP-FPM and FastCGI. The amazing\njust-in-time (JIT) compilation and the integrated foreign function interface (FFI) in LuaJIT have also been\nmotives to move away from PHP.")]),a("p",[e._v("Perhaps you've already noticed, "),a("RouterLink",{attrs:{to:"/"}},[e._v("https://images.weserv.nl/")]),e._v(" already states that API version 4 is\nrunning. This is not a mistake, our A/B testing went so well that we decided (on time of writing) to\nforward all traffic to API version 4.")],1),a("h2",{attrs:{id:"what-has-changed-for-the-end-user"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#what-has-changed-for-the-end-user"}},[e._v("#")]),e._v(" What has changed for the end user?")]),a("p",[e._v("Absolutely nothing, all parameters listed on API 3 still work on API 4. The only thing you might notice is\nwhen you process an image, that it will load faster. If you found something odd, don't hesitate to contact\nus.")]),a("p",[e._v("We track support tickets, issues and feature requests using the "),a("a",{attrs:{href:"https://github.com/weserv/images/issues",target:"_blank",rel:"noopener noreferrer"}},[e._v("GitHub issue tracker"),a("OutboundLink")],1),e._v(".")]),a("h2",{attrs:{id:"what-has-been-added"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#what-has-been-added"}},[e._v("#")]),e._v(" What has been added?")]),a("p",[e._v("We introduced some new parameters and a more flexible URI parser.")]),a("h3",{attrs:{id:"masking"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#masking"}},[e._v("#")]),e._v(" Masking")]),a("p",[e._v("Controls the visible and non-visible area of the image. Previously the "),a("RouterLink",{attrs:{to:"/docs/mask.html#mask-type"}},[a("code",[e._v("&mask")])]),e._v(" and "),a("RouterLink",{attrs:{to:"/docs/mask.html#mask-trim"}},[a("code",[e._v("&mtrim")])]),e._v(" parameter\nwere named as "),a("code",[e._v("&shape")]),e._v(" and "),a("code",[e._v("&strim")]),e._v(", it was renamed to make room for new mask features.")],1),a("ul",[a("li",[e._v("Mask type "),a("RouterLink",{attrs:{to:"/docs/mask.html#mask-type"}},[a("code",[e._v("&mask")])]),e._v(". Sets the mask type from a predefined list of shapes:\n"),a("ul",[a("li",[a("code",[e._v("circle")])]),a("li",[a("code",[e._v("ellipse")])]),a("li",[a("code",[e._v("triangle")])]),a("li",[a("code",[e._v("triangle-180")]),e._v(": Triangle tilted upside down")]),a("li",[a("code",[e._v("pentagon")])]),a("li",[a("code",[e._v("pentagon-180")]),e._v(": Pentagon tilted upside down")]),a("li",[a("code",[e._v("hexagon")])]),a("li",[a("code",[e._v("square")]),e._v(": Square tilted 45 degrees")]),a("li",[a("code",[e._v("star")]),e._v(": 5-point star")]),a("li",[a("code",[e._v("heart")])])])],1),a("li",[e._v("Mask trim "),a("RouterLink",{attrs:{to:"/docs/mask.html#mask-trim"}},[a("code",[e._v("&mtrim")])]),e._v(". Removes the remaining whitespace from the mask.")],1),a("li",[e._v("Mask background "),a("RouterLink",{attrs:{to:"/docs/mask.html#mask-background"}},[a("code",[e._v("&mbg")])]),e._v(". Sets the background color of the mask.")],1)]),a("h3",{attrs:{id:"flexible-uri-parser"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#flexible-uri-parser"}},[e._v("#")]),e._v(" Flexible URI parser")]),a("p",[e._v("With API 4 we are supporting URI's starting with "),a("code",[e._v("http://")]),e._v(" and "),a("code",[e._v("https://")]),e._v(". Previously this would result in\nan error to prevent BBCode parsers to fail on the double "),a("code",[e._v("http(s)://")]),e._v("-part. Because Markdown is\nincreasingly becoming the standard for user input, we decided to make the URI parser more flexible.\nNote that we will still support "),a("code",[e._v("?url=ssl:…")]),e._v(" and "),a("code",[e._v("?url=//…")]),e._v("-requests for backwards compatibility.")]),a("h2",{attrs:{id:"where-can-i-view-the-code"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#where-can-i-view-the-code"}},[e._v("#")]),e._v(" Where can I view the code?")]),a("p",[e._v("The code is available on the "),a("a",{attrs:{href:"https://github.com/weserv/images/tree/4.x",target:"_blank",rel:"noopener noreferrer"}},[e._v("4.x branch"),a("OutboundLink")],1),e._v(", this will become the default branch in the future.")])])}),[],!1,null,null,null);t.default=s.exports}}]);